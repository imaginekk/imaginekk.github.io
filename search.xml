<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Monitor</title>
    <url>/2023/07/28/JUC/</url>
    <content><![CDATA[<h2 id="Monitor-概念"><a href="#Monitor-概念" class="headerlink" title="Monitor 概念"></a>Monitor 概念</h2><h3 id="Java-对象头"><a href="#Java-对象头" class="headerlink" title="Java 对象头"></a>Java 对象头</h3><p>以 32 位虚拟机为例</p>
<p>普通对象</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">|<span class="params">--------------------------------------------------------------</span>|</span><br><span class="line">|<span class="params">                      Object Header (64 bits)                 </span>|</span><br><span class="line">|<span class="params">------------------------------------</span>|-------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits) |<span class="params">  Klass Word (32 bits)   </span>|</span><br><span class="line">|<span class="params">------------------------------------</span>|-------------------------|<span class="params"></span></span><br></pre></td></tr></table></figure>

<p>数组对象</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">|<span class="params">---------------------------------------------------------------------------------</span>|</span><br><span class="line">|<span class="params">                          Object Header (96 bits)                                </span>|</span><br><span class="line">|<span class="params">--------------------------------</span>|-----------------------|<span class="params">------------------------</span>|</span><br><span class="line">|<span class="params">        Mark Word(32bits)       </span>|    <span class="title class_">Klass</span> <span class="title class_">Word</span>(32bits) |<span class="params">   array length(32bits) </span>|</span><br><span class="line">|<span class="params">--------------------------------</span>|-----------------------|<span class="params">------------------------</span>|</span><br></pre></td></tr></table></figure>

<p>其中 Mark Word 结构为</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                     <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits)               |<span class="params">        State       </span>|</span><br><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|      <span class="symbol">hashcode:</span><span class="number">25</span> |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">0</span>         |<span class="params"> 01 </span>|        <span class="title class_">Normal</span>      |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">      thread:23 </span>| <span class="symbol">epoch:</span><span class="number">2</span> |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">1</span> |<span class="params"> 01 </span>|        <span class="title class_">Biased</span>      |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">                ptr_to_lock_record:30             </span>| <span class="number">00</span> |<span class="params"> Lightweight Locked </span>|</span><br><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|            <span class="symbol">ptr_to_heavyweight_monitor:</span><span class="number">30</span>         |<span class="params"> 10 </span>| <span class="title class_">Heavyweight</span> <span class="title class_">Locked</span> |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">                                                  </span>| <span class="number">11</span> |<span class="params">    Marked <span class="keyword">for</span> GC   </span>|</span><br><span class="line">|<span class="params">-------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br></pre></td></tr></table></figure>

<p>64 位虚拟机 Mark Word</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                        <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">64</span> bits)                         |<span class="params">        State       </span>|</span><br><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|   <span class="symbol">unused:</span><span class="number">25</span> |<span class="params"> hashcode:31 </span>| <span class="symbol">unused:</span><span class="number">1</span> |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">0</span> |<span class="params"> 01  </span>|        <span class="title class_">Normal</span>      |<span class="params"></span></span><br><span class="line"><span class="params"></span>|--------------------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">       thread:54 </span>| <span class="symbol">epoch:</span><span class="number">2</span> |<span class="params"> unused:1 </span>| <span class="symbol">age:</span><span class="number">4</span> |<span class="params"> biased_lock:1 </span>| <span class="number">01</span>  |<span class="params">        Biased      </span>|</span><br><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                   <span class="symbol">ptr_to_lock_record:</span><span class="number">62</span>                      |<span class="params"> 00  </span>| <span class="title class_">Lightweight</span> <span class="title class_">Locked</span> |<span class="params"></span></span><br><span class="line"><span class="params"></span>|--------------------------------------------------------------------|<span class="params">--------------------</span>|</span><br><span class="line">|<span class="params">                   ptr_to_heavyweight_monitor:62              </span>| <span class="number">10</span>  |<span class="params"> Heavyweight Locked </span>|</span><br><span class="line">|<span class="params">--------------------------------------------------------------------</span>|--------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                                                              |<span class="params">11   </span>|     <span class="title class_">Marked</span> <span class="keyword">for</span> <span class="variable constant_">GC</span>  |<span class="params"></span></span><br><span class="line"><span class="params"></span>|--------------------------------------------------------------------|<span class="params">--------------------</span>|</span><br></pre></td></tr></table></figure>

<h2 id="Monitor-原理"><a href="#Monitor-原理" class="headerlink" title="Monitor 原理"></a>Monitor 原理</h2><p>Monitor 被翻译为<strong>监视器</strong>或<strong>管程</strong><br>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的<br>Mark Word 中就被设置指向 Monitor 对象的指针</p>
<p>Monitor 结构如下<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721114234.png"></p>
<ul>
<li>刚开始 Monitor 中 Owner 为 null</li>
<li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner</li>
<li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED</li>
<li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</li>
<li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析</li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果</li>
<li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li>
</ul>
</blockquote>
<pre class="mermaid">graph LR
    A(开始) -->B(执行 monitorenter)
    B --> C{锁计数器是否为0}
   
    C --是--> D(锁计数器加1)
    D --> F(结束)
    C --否--> F</pre>



<h2 id="synchronized优化"><a href="#synchronized优化" class="headerlink" title="synchronized优化"></a>synchronized优化</h2><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。<br>轻量级锁对使用者是透明的，即语法仍然是 synchronized<br>假设有两个方法同步块，利用同一个对象加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">		<span class="comment">// 同步块 A</span></span><br><span class="line">		method2();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">		<span class="comment">// 同步块 B</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721172232.png" alt="image.png"></p>
</li>
<li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721172828.png" alt="image.png"></p>
</li>
<li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721173056.png" alt="Uploading file...64t70"></p>
</li>
<li><p>如果 cas 失败，有两种情况</p>
<ul>
<li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li>
<li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721173420.png" alt="image.png"></li>
</ul>
</li>
<li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</p>
</li>
</ul>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721173056.png" alt="Uploading file...64t70"></p>
<ul>
<li>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头<ul>
<li>成功，则解锁成功</li>
<li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li>
</ul>
</li>
</ul>
<h3 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h3><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">	<span class="comment">// 同步块</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721203222.png" alt="image.png"></p>
</li>
<li><p>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程</p>
<ul>
<li>即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址</li>
<li>然后自己进入 Monitor 的 EntryList BLOCKED<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230721203742.png" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="自旋"><a href="#自旋" class="headerlink" title="自旋"></a>自旋</h3><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步<br>块，释放了锁），这时当前线程就可以避免阻塞。</p>
<ul>
<li>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</li>
<li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</li>
<li>Java 7 之后不能控制是否开启自旋功能</li>
</ul>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。<br>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">		<span class="comment">// 同步块 A</span></span><br><span class="line">		m2();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">		<span class="comment">// 同步块 B</span></span><br><span class="line">		m3();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 C</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph LR
    subgraph 轻量级锁
    id1["m1内调用synchronized(obj)"]--用 锁记录 替换 markword-->对象
    id1["m1内调用synchronized(obj)"]-.生成锁记录.->id1
    id2["m1内调用synchronized(obj)"]--用 锁记录 替换 markword-->对象
    id2["m1内调用synchronized(obj)"]-.生成锁记录.->id2
    id3["m1内调用synchronized(obj)"]--用 锁记录 替换 markword-->对象
    id3["m1内调用synchronized(obj)"]-.生成锁记录.->id3
    end</pre>

<pre class="mermaid">graph LR
    subgraph 偏向锁
    id1["m1内调用synchronized(obj)"]--用 ThreadID 替换 markword-->对象
    id2["m1内调用synchronized(obj)"]--检查 ThreadID 是否是自己-->对象
    id3["m1内调用synchronized(obj)"]--检查 ThreadID 是否是自己-->对象
    end</pre>

<p>一个对象创建时：</p>
<ul>
<li>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0</li>
<li>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 -XX:BiasedLockingStartupDelay&#x3D;0 来禁用延迟</li>
<li>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</li>
</ul>
<h4 id="撤销-调用对象-hashCode"><a href="#撤销-调用对象-hashCode" class="headerlink" title="撤销 - 调用对象 hashCode"></a>撤销 - 调用对象 hashCode</h4><p>调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销变为正常对象</p>
<ul>
<li>轻量级锁会在锁记录中记录 hashCode</li>
<li>重量级锁会在 Monitor 中记录 hashCode</li>
</ul>
<h4 id="撤销-其它线程使用对象"><a href="#撤销-其它线程使用对象" class="headerlink" title="撤销 - 其它线程使用对象"></a>撤销 - 其它线程使用对象</h4><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p>
<h4 id="撤销-调用-wait-notify"><a href="#撤销-调用-wait-notify" class="headerlink" title="撤销 - 调用 wait&#x2F;notify"></a>撤销 - 调用 wait&#x2F;notify</h4><h4 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h4><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID<br>当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程</p>
<h4 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h4><p>当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的</p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2023/08/01/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h3 id="常见集合"><a href="#常见集合" class="headerlink" title="常见集合"></a>常见集合</h3><p>集合相关类和接口都在java.util中，主要分为3种：List（列表）、Map（映射）、Set(集)。<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801154435.png" alt="image.png"><br>其中<code>Collection</code>是集合<code>List</code>、<code>Set</code>的父接口，它主要有两个子接口：</p>
<ul>
<li><code>List</code>：存储的元素有序，可重复。</li>
<li><code>Set</code>：存储的元素不无序，不可重复。<br><code>Map</code>是另外的接口，是键值对映射结构的集合。</li>
</ul>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><h5 id="ArrayList和LinkedList有什么区别？"><a href="#ArrayList和LinkedList有什么区别？" class="headerlink" title="ArrayList和LinkedList有什么区别？"></a>ArrayList和LinkedList有什么区别？</h5><p>（1）数据结构不同</p>
<ul>
<li>ArrayList基于数组实现</li>
<li>LinkedList基于双向链表实现<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801155559.png" alt="image.png"><br>(2) 多数情况下，ArrayList更利于查找，LinkedList更利于增删</li>
<li>ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1)；LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n)；当然，get(E element)这种查找，两种集合都需要遍历，时间复杂度都是O(n)。</li>
<li>ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容；双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素。<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801162352.png" alt="image.png"><br>（3）是否支持随机访问</li>
<li>ArrayList基于数组，所以它可以根据下标查找，支持随机访问</li>
<li>LinkedList基于链表，所以它没法根据序号直接获取元素<br>（4）内存占用，ArrayList基于数组，是一块连续的内存空间，LinkedList基于链表，内存空间不连续，它们在空间占用上都有一些额外的消耗：</li>
<li>ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费</li>
<li>LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间</li>
</ul>
<p>ArrayList是基于数组的集合，数组的容量是在定义的时候确定的如果没有指明数组的长度初始容量为0，在第一次添加数据的时候才会初始化容量为10，如果数组满了，再插入，就会数组溢出。所以在插入时候，会先检查是否需要扩容，如果当前容量+1超过数组长度，就会进行扩容。<br>ArrayList的扩容是创建一个<strong>1.5倍</strong>的新数组，然后把原数组的值拷贝过去。<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801163211.png" alt="image.png"></p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><h5 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h5><p>JDK1.8的数据结构是<code>数组</code>+<code>链表</code>+<code>红黑树</code>。<br>其中，桶数组是用来存储数据元素，链表是用来解决冲突，红黑树是为了提高查询的效率。<br><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801182620.png" alt="image.png"></p>
<ul>
<li>数据元素通过映射关系，也就是散列函数，映射到桶数组对应索引的位置</li>
<li>如果发生冲突，从冲突的位置拉一个链表，插入冲突的元素</li>
<li>如果链表长度&gt;8&amp;数组大小&gt;&#x3D;64，链表转为红黑树</li>
<li>如果红黑树节点个数&lt;6 ，转为链表</li>
</ul>
<h5 id="HashMap的put流程"><a href="#HashMap的put流程" class="headerlink" title="HashMap的put流程"></a>HashMap的put流程</h5><p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801175716.png" alt="image.png"></p>
<ol>
<li>首先进行哈希值的扰动，获取一个新的哈希值。</li>
<li>判断tab是否位空或者长度为0，如果是则进行扩容操作。</li>
<li>根据哈希值计算下标，如果对应小标正好没有存放数据，则直接插入即可否则需要覆盖。</li>
<li>判断tab[i]是否为树节点，否则向链表中插入数据，是则向树中插入节点。</li>
<li>如果链表中插入节点的时候，链表长度大于等于8，则需要把链表转换为红黑树。</li>
<li>最后所有元素处理完成后，判断是否超过阈值，超过则扩容。</li>
</ol>
<h5 id="HashMap查找元素"><a href="#HashMap查找元素" class="headerlink" title="HashMap查找元素"></a>HashMap查找元素</h5><p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801180150.png" alt="image.png"></p>
<p>HashMap的查找就简单很多：</p>
<ol>
<li>使用扰动函数，获取新的哈希值</li>
<li>计算数组下标，获取节点</li>
<li>当前节点和key匹配，直接返回</li>
<li>否则，当前节点是否为树节点，查找红黑树</li>
<li>否则，遍历链表查找</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>一条SQL语句的执行过程</title>
    <url>/2023/08/01/%E4%B8%80%E6%9D%A1SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="一条SQL语句的执行过程"><a href="#一条SQL语句的执行过程" class="headerlink" title="一条SQL语句的执行过程"></a>一条SQL语句的执行过程</h2><p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20230801222601.png" alt="image.png"></p>
<h3 id="1-连接器"><a href="#1-连接器" class="headerlink" title="1. 连接器"></a>1. 连接器</h3><p>连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。</p>
<p>主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的。</p>
<h3 id="2-查询缓存-MySQL-8-0-版本后移除"><a href="#2-查询缓存-MySQL-8-0-版本后移除" class="headerlink" title="2. 查询缓存(MySQL 8.0 版本后移除)"></a>2. 查询缓存(MySQL 8.0 版本后移除)</h3><p>查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。</p>
<p>连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 SQL 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询语句，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件。</p>
<p>MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。</p>
<p>所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。</p>
<p>MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。</p>
<h3 id="3-分析器"><a href="#3-分析器" class="headerlink" title="3. 分析器"></a>3. 分析器</h3><p>MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步：</p>
<p><strong>第一步，词法分析</strong>，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。</p>
<p><strong>第二步，语法分析</strong>，主要就是判断你输入的 SQL 是否正确，是否符合 MySQL 的语法。</p>
<p>完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。</p>
<h3 id="4-优化器"><a href="#4-优化器" class="headerlink" title="4. 优化器"></a>4. 优化器</h3><p>优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优，这篇文章涉及对这部分知识的深入讲解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。</p>
<p>可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。</p>
<h3 id="5-执行器"><a href="#5-执行器" class="headerlink" title="5. 执行器"></a>5. 执行器</h3><p>当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。</p>
<p>结合上面的说明，我们分析下这个语句的执行流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_student  A where A.age=&#x27;18&#x27; and A.name=&#x27; 张三 &#x27;;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>先检查该语句是否有权限，如果没有权限，直接返回错误信息，如果有权限，在 MySQL8.0 版本以前，会先查询缓存，以这条 SQL 语句为 key 在内存中查询是否有结果，如果有直接缓存，如果没有，执行下一步。</p>
</li>
<li><p>通过分析器进行词法分析，提取 SQL 语句的关键元素，比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id&#x3D;’1’。然后判断这个 SQL 语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。</p>
</li>
<li><p>接下来就是优化器进行确定执行方案，上面的 SQL 语句，可以有两种执行方案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.先查询学生表中姓名为“张三”的学生，然后判断是否年龄是 18。</span><br><span class="line">b.先找出学生中年龄 18 岁的学生，然后再查询姓名为“张三”的学生。</span><br></pre></td></tr></table></figure>

<p>那么优化器根据自己的优化算法进行选择执行效率最好的一个方案（优化器认为，有时候不一定最好）。那么确认了执行计划后就准备开始执行了。</p>
</li>
<li><p>进行权限校验，如果没有权限就会返回错误信息，如果有权限就会调用数据库引擎接口，返回引擎的执行结果</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/2023/08/03/MySQL%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h2><p>索引就类似我们看书时书的目录，索引就是数据的目录，所谓的存储引擎，说白了就是如何存储数据</p>
<h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><ul>
<li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong>。</li>
<li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong>。</li>
<li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li>
<li>按「字段个数」分类：<strong>单列索引、联合索引</strong>。</li>
</ul>
<p><em><strong>1、B+Tree vs B Tree</strong></em></p>
<p>B+Tree 只在叶子节点存储数据，而 B 树 的非叶子节点也要存储数据，所以 B+Tree 的单个节点的数据量更小，在相同的磁盘 I&#x2F;O 次数下，就能查询更多的节点。</p>
<p>另外，B+Tree 叶子节点采用的是双链表连接，适合 MySQL 中常见的基于范围的顺序查找，而 B 树无法做到这一点。</p>
<p><em><strong>2、B+Tree vs 二叉树</strong></em></p>
<p>对于有 N 个叶子节点的 B+Tree，其搜索复杂度为<code>O(logdN)</code>，其中 d 表示节点允许的最大子节点个数为 d 个。</p>
<p>在实际的应用当中， d 值是大于100的，这样就保证了，即使数据达到千万级别时，B+Tree 的高度依然维持在 3<del>4 层左右，也就是说一次数据查询操作只需要做 3</del>4 次的磁盘 I&#x2F;O 操作就能查询到目标数据。</p>
<p>而二叉树的每个父节点的儿子节点个数只能是 2 个，意味着其搜索复杂度为 <code>O(logN)</code>，这已经比 B+Tree 高出不少，因此二叉树检索到目标数据所经历的磁盘 I&#x2F;O 次数要更多。</p>
<p><em><strong>3、B+Tree vs Hash</strong></em></p>
<p>Hash 在做等值查询的时候效率贼快，搜索复杂度为 O(1)。</p>
<p>但是 Hash 表不适合做范围查询，它更适合做等值的查询，这也是 B+Tree 索引要比 Hash 表索引有着更广泛的适用场景的原因</p>
<h3 id="按物理存储分类"><a href="#按物理存储分类" class="headerlink" title="按物理存储分类"></a>按物理存储分类</h3><p>从物理存储的角度来看，索引分为聚簇索引（主键索引）、二级索引（辅助索引）。</p>
<p>这两个区别在前面也提到了：</p>
<ul>
<li>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li>
<li>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</li>
</ul>
<p>所以，在查询时使用了二级索引，如果查询的数据能在二级索引里查询的到，那么就不需要回表，这个过程就是覆盖索引。如果查询的数据不在二级索引里，就会先检索二级索引，找到对应的叶子节点，获取到主键值后，然后再检索主键索引，就能查询到数据了，这个过程就是回表。</p>
<h3 id="按字段特性分类"><a href="#按字段特性分类" class="headerlink" title="按字段特性分类"></a>按字段特性分类</h3><p>从字段特性的角度来看，索引分为主键索引、唯一索引、普通索引、前缀索引。</p>
<h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>主键索引就是建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。</p>
<p>在创建表时，创建主键索引的方式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name  (</span><br><span class="line">  ....</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (index_column_1) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>唯一索引建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。</p>
<p>在创建表时，创建唯一索引的方式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name  (</span><br><span class="line">  ....</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY(index_column_1,index_column_2,...) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>建表后，如果要创建唯一索引，可以使用这面这条命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name(index_column_1,index_column_2,...); </span><br></pre></td></tr></table></figure>

<h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><p>普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。</p>
<p>在创建表时，创建普通索引的方式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name  (</span><br><span class="line">  ....</span><br><span class="line">  INDEX(index_column_1,index_column_2,...) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>建表后，如果要创建普通索引，可以使用这面这条命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name(index_column_1,index_column_2,...); </span><br></pre></td></tr></table></figure>

<h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。</p>
<p>使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</p>
<p>在创建表时，创建前缀索引的方式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">    column_list,</span><br><span class="line">    INDEX(column_name(length))</span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<p>建表后，如果要创建前缀索引，可以使用这面这条命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name(column_name(length)); </span><br></pre></td></tr></table></figure>

<h3 id="按字段个数分类"><a href="#按字段个数分类" class="headerlink" title="按字段个数分类"></a>按字段个数分类</h3><p>从字段个数的角度来看，索引分为单列索引、联合索引（复合索引）。</p>
<ul>
<li>建立在单列上的索引称为单列索引，比如主键索引；</li>
<li>建立在多列上的索引称为联合索引；</li>
</ul>
<h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><p>通过将多个字段组合成一个索引，该索引就被称为联合索引。</p>
<p>比如，将商品表中的 product_no 和 name 字段组合成联合索引<code>(product_no, name)</code>，创建联合索引的方式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_product_no_name <span class="keyword">ON</span> product(product_no, name);</span><br></pre></td></tr></table></figure>

<h2 id="什么时候需要-不需要创建索引？"><a href="#什么时候需要-不需要创建索引？" class="headerlink" title="什么时候需要 &#x2F; 不需要创建索引？"></a>什么时候需要 &#x2F; 不需要创建索引？</h2><p>索引最大的好处是提高查询速度，但是索引也是有缺点的，比如：</p>
<ul>
<li>需要占用物理空间，数量越大，占用空间越大；</li>
<li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增大；</li>
<li>会降低表的增删改的效率，因为每次增删改索引，B+ 树为了维护索引有序性，都需要进行动态维护。</li>
</ul>
<h4 id="什么时候适用索引？"><a href="#什么时候适用索引？" class="headerlink" title="什么时候适用索引？"></a>什么时候适用索引？</h4><ul>
<li>字段有唯一性限制的</li>
<li>经常用于 <code>WHERE</code> 查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。</li>
<li>经常用于 <code>GROUP BY</code> 和 <code>ORDER BY</code> 的字段，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的。</li>
</ul>
<h4 id="什么时候不需要创建索引？"><a href="#什么时候不需要创建索引？" class="headerlink" title="什么时候不需要创建索引？"></a>什么时候不需要创建索引？</h4><ul>
<li><code>WHERE</code> 条件，<code>GROUP BY</code>，<code>ORDER BY</code> 里用不到的字段，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。</li>
<li>字段中存在大量重复数据，不需要创建索引，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。</li>
<li>表数据太少的时候，不需要创建索引；</li>
<li>经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li>
</ul>
<h2 id="有什么优化索引的方法？"><a href="#有什么优化索引的方法？" class="headerlink" title="有什么优化索引的方法？"></a>有什么优化索引的方法？</h2><p>这里说一下几种常见优化索引的方法：</p>
<ul>
<li>前缀索引优化；</li>
<li>覆盖索引优化；</li>
<li>主键索引最好是自增的；</li>
<li>防止索引失效；</li>
</ul>
<h3 id="前缀索引优化"><a href="#前缀索引优化" class="headerlink" title="前缀索引优化"></a>前缀索引优化</h3><p>前缀索引顾名思义就是使用某个字段中字符串的前几个字符建立索引，那我们为什么需要使用前缀来建立索引呢？</p>
<p>使用前缀索引是为了减小索引字段大小，可以增加一个索引页中存储的索引值，有效提高索引的查询速度。在一些大字符串的字段作为索引时，使用前缀索引可以帮助我们减小索引项的大小。</p>
<p>不过，前缀索引有一定的局限性，例如：</p>
<ul>
<li>order by 就无法使用前缀索引；</li>
<li>无法把前缀索引用作覆盖索引；</li>
</ul>
<h3 id="覆盖索引优化"><a href="#覆盖索引优化" class="headerlink" title="覆盖索引优化"></a>覆盖索引优化</h3><p>覆盖索引是指 SQL 中 query 的所有字段，在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作。</p>
<p>假设我们只需要查询商品的名称、价格，有什么方式可以避免回表呢？</p>
<p>我们可以建立一个联合索引，即「商品ID、名称、价格」作为一个联合索引。如果索引中存在这些数据，查询将不会再次检索主键索引，从而避免回表。</p>
<p>所以，使用覆盖索引的好处就是，不需要查询出包含整行记录的所有信息，也就减少了大量的 I&#x2F;O 操作。</p>
<h3 id="主键索引最好是自增的"><a href="#主键索引最好是自增的" class="headerlink" title="主键索引最好是自增的"></a>主键索引最好是自增的</h3><p>我们在建表的时候，都会默认将主键索引设置为自增的，具体为什么要这样做呢？又什么好处？</p>
<p>InnoDB 创建主键索引默认为聚簇索引，数据被存放在了 B+Tree 的叶子节点上。也就是说，同一个叶子节点内的各个数据是按主键顺序存放的，因此，每当有一条新的数据插入时，数据库会根据主键将其插入到对应的叶子节点中。</p>
<p><strong>如果我们使用自增主键</strong>，那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为每次<strong>插入一条新记录，都是追加操作，不需要重新移动数据</strong>，因此这种插入数据的方法效率非常高。</p>
<p><strong>如果我们使用非自增主键</strong>，由于每次插入主键的索引值都是随机的，因此每次插入新的数据时，就可能会插入到现有数据页中间的某个位置，这将不得不移动其它数据来满足新数据的插入，甚至需要从一个页面复制数据到另外一个页面，我们通常将这种情况称为<strong>页分裂</strong>。<strong>页分裂还有可能会造成大量的内存碎片，导致索引结构不紧凑，从而影响查询效率</strong>。</p>
<p>举个例子，假设某个数据页中的数据是1、3、5、9，且数据页满了，现在准备插入一个数据7，则需要把数据页分割为两个数据页：</p>
<p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E9%A1%B5%E5%88%86%E8%A3%82.png" alt="img"></p>
<p>出现页分裂时，需要将一个页的记录移动到另外一个页，性能会受到影响，同时页空间的利用率下降，造成存储空间的浪费。</p>
<p>而如果记录是顺序插入的，例如插入数据11，则只需开辟新的数据页，也就不会发生页分裂：</p>
<p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E5%BC%80%E8%BE%9F%E6%96%B0%E9%A1%B5.png" alt="img"></p>
<p>因此，在使用 InnoDB 存储引擎时，如果没有特别的业务需求，建议使用自增字段作为主键。</p>
<p>另外，主键字段的长度不要太大，因为<strong>主键字段长度越小，意味着二级索引的叶子节点越小（二级索引的叶子节点存放的数据是主键值），这样二级索引占用的空间也就越小</strong>。</p>
<h3 id="索引最好设置为-NOT-NULL"><a href="#索引最好设置为-NOT-NULL" class="headerlink" title="索引最好设置为 NOT NULL"></a>索引最好设置为 NOT NULL</h3><p>为了更好的利用索引，索引列要设置为 NOT NULL 约束。有两个原因：</p>
<ul>
<li><p>第一原因：索引列存在 NULL 就会导致优化器在做索引选择的时候更加复杂，更加难以优化，因为可为 NULL 的列会使索引、索引统计和值比较都更复杂，比如进行索引统计时，count 会省略值为NULL 的行。</p>
</li>
<li><p>第二个原因：NULL 值是一个没意义的值，但是它会占用物理空间，所以会带来的存储空间的问题，因为 InnoDB 存储记录的时候，如果表中存在允许为 NULL 的字段，那么<a href="https://xiaolincoding.com/mysql/base/row_format.html#innodb-%E8%A1%8C%E6%A0%BC%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B">行格式 (opens new window)</a>中<strong>至少会用 1 字节空间存储 NULL 值列表</strong>，如下图的紫色部分：</p>
<p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/row_format/COMPACT.drawio.png" alt="img"></p>
</li>
</ul>
<h3 id="防止索引失效"><a href="#防止索引失效" class="headerlink" title="防止索引失效"></a>防止索引失效</h3><p>用上了索引并不意味着查询的时候会使用到索引，所以我们心里要清楚有哪些情况会导致索引失效，从而避免写出索引失效的查询语句，否则这样的查询效率是很低的。</p>
<p>发生索引失效的情况：</p>
<ul>
<li>当我们使用左或者左右模糊匹配的时候，也就是 <code>like %xx</code> 或者 <code>like %xx%</code>这两种方式都会造成索引失效；</li>
<li>当我们在查询条件中对索引列做了计算、函数、类型转换操作，这些情况下都会造成索引失效；</li>
<li>联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。</li>
<li>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</li>
</ul>
<p>我上面说的是常见的索引失效场景，实际过程中，可能会出现其他的索引失效场景，这时我们就需要查看执行计划，通过执行计划显示的数据判断查询语句是否使用了索引。</p>
<p>如下图，就是一个没有使用索引，并且是一个全表扫描的查询语句。</p>
<p><img src="https://cdn.xiaolincoding.com//mysql/other/798ab1331d1d6dff026e262e788f1a28.png" alt="img"></p>
<p>对于执行计划，参数有：</p>
<ul>
<li>possible_keys 字段表示可能用到的索引；</li>
<li>key 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引；</li>
<li>key_len 表示索引的长度；</li>
<li>rows 表示扫描的数据行数。</li>
<li>type 表示数据扫描类型，我们需要重点看这个。</li>
</ul>
<p>type 字段就是描述了找到所需数据时使用的扫描方式是什么，常见扫描类型的<strong>执行效率从低到高的顺序为</strong>：</p>
<ul>
<li>All（全表扫描）；</li>
<li>index（全索引扫描）；</li>
<li>range（索引范围扫描）；</li>
<li>ref（非唯一索引扫描）；</li>
<li>eq_ref（唯一索引扫描）；</li>
<li>const（结果只有一条的主键或唯一索引扫描）。</li>
</ul>
<p>在这些情况里，all 是最坏的情况，因为采用了全表扫描的方式。index 和 all 差不多，只不过 index 对索引表进行全扫描，这样做的好处是不再需要对数据进行排序，但是开销依然很大。所以，要尽量避免全表扫描和全索引扫描。</p>
<p>range 表示采用了索引范围扫描，一般在 where 子句中使用 &lt; 、&gt;、in、between 等关键词，只检索给定范围的行，属于范围查找。<strong>从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式</strong>。</p>
<p>ref 类型表示采用了非唯一索引，或者是唯一索引的非唯一性前缀，返回数据返回可能是多条。因为虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。</p>
<p>eq_ref 类型是使用主键或唯一索引时产生的访问方式，通常使用在多表联查中。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。</p>
<p>const 类型表示使用了主键或者唯一索引与常量值进行比较，比如 select name from product where id&#x3D;1。</p>
<p>需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，<strong>const 是与常量进行比较，查询效率会更快，而 eq_ref 通常用于多表联查中</strong>。</p>
<blockquote>
<p>除了关注 type，我们也要关注 extra 显示的结果。</p>
</blockquote>
<p>这里说几个重要的参考指标：</p>
<ul>
<li>Using filesort ：当查询语句中包含 group by 操作，而且无法利用索引完成排序操作的时候， 这时不得不选择相应的排序算法进行，甚至可能会通过文件排序，效率是很低的，所以要避免这种问题的出现。</li>
<li>Using temporary：使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表，常见于排序 order by 和分组查询 group by。效率低，要避免这种问题的出现。</li>
<li>Using index：所需数据只需在索引即可全部获得，不须要再到表中取数据，也就是使用了覆盖索引，避免了回表操作，效率不错。</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/04/24/PS/</url>
    <content><![CDATA[<h2 id="自由变换、选区、填充、局部颜色填充、渐变填充"><a href="#自由变换、选区、填充、局部颜色填充、渐变填充" class="headerlink" title="自由变换、选区、填充、局部颜色填充、渐变填充"></a>自由变换、选区、填充、局部颜色填充、渐变填充</h2><p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20240420145634.png"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/image-20240420145843445.png" alt="image-20240420145843445"></p>
<h2 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h2><h3 id="多边形套索工具（被抠对象棱角分明边界清晰）"><a href="#多边形套索工具（被抠对象棱角分明边界清晰）" class="headerlink" title="多边形套索工具（被抠对象棱角分明边界清晰）"></a>多边形套索工具（被抠对象棱角分明边界清晰）</h3><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E9%B9%BF%E7%89%B9%E4%B8%B9%E7%AB%8B%E4%BD%93%E6%96%B9%E5%9D%97%E5%B1%8B.jpg"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E8%93%9D%E5%A4%A9%E7%99%BD%E4%BA%91%E7%B4%A0%E6%9D%90.jpg" alt="蓝天白云素材"></p>
<p>效果：</p>
<p>![](<a href="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E8%93%9D%E5%A4%A9%E7%99%BD%E4%BA%91%E5%A1%94">https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/蓝天白云塔</a> 拷贝.jpg)</p>
<h3 id="快速选择工具（较为复杂的图片）"><a href="#快速选择工具（较为复杂的图片）" class="headerlink" title="快速选择工具（较为复杂的图片）"></a>快速选择工具（较为复杂的图片）</h3><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/003.jpg"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/004.jpg"></p>
<p>效果：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E5%B0%8F%E9%BB%91%20%E6%8B%B7%E8%B4%9D.jpg" alt="小黑 拷贝"></p>
<h3 id="魔棒工具（色彩单一的图片）"><a href="#魔棒工具（色彩单一的图片）" class="headerlink" title="魔棒工具（色彩单一的图片）"></a>魔棒工具（色彩单一的图片）</h3><p>素材：</p>
<p>![](<a href="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/Apple">https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/Apple</a> Watch UItra2_01.jpg)</p>
<p>效果：</p>
<p>![](<a href="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%89%8B%E8%A1%A8%E6%B5%B7%E6%8A%A5">https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/手表海报</a> 拷贝.jpg)</p>
<h3 id="选择并遮住（毛发）"><a href="#选择并遮住（毛发）" class="headerlink" title="选择并遮住（毛发）"></a>选择并遮住（毛发）</h3><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/chihuahua-2900362.jpg"></p>
<p>效果</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20240420153114.png"></p>
<h3 id="钢笔工具抠图（扣出来可以比较精细）"><a href="#钢笔工具抠图（扣出来可以比较精细）" class="headerlink" title="钢笔工具抠图（扣出来可以比较精细）"></a>钢笔工具抠图（扣出来可以比较精细）</h3><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/1_upscayl_4x_ultramix_balanced.jpg"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/5.jpg"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%96%87%E6%A1%88.png"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E5%8D%96%E7%82%B9.png"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/logo.png"></p>
<p>效果</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%A8%A1%E4%BB%BF%20%E6%8B%B7%E8%B4%9D.jpg" alt="模仿 拷贝"></p>
<h2 id="形状图层、描边、布尔"><a href="#形状图层、描边、布尔" class="headerlink" title="形状图层、描边、布尔"></a>形状图层、描边、布尔</h2><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/image-20240420170858887.png" alt="image-20240420170858887"></p>
<p>效果：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/image-20240420171035843.png" alt="image-20240420171035843"></p>
<h2 id="画笔-实现产品效果可视化"><a href="#画笔-实现产品效果可视化" class="headerlink" title="画笔 实现产品效果可视化"></a>画笔 实现产品效果可视化</h2><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20240423180637.png"></p>
<p>效果：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20240423180720.png"></p>
<h2 id="文字、渐变填充、抠图海报设计"><a href="#文字、渐变填充、抠图海报设计" class="headerlink" title="文字、渐变填充、抠图海报设计"></a>文字、渐变填充、抠图海报设计</h2><p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E7%B4%A0%E6%9D%90.jpg" alt="素材"></p>
<p>效果：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/20240423181026.png"></p>
<h2 id="衣服换色"><a href="#衣服换色" class="headerlink" title="衣服换色"></a>衣服换色</h2><p>素材</p>
<p>![](<a href="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/Design">https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/Design</a> by LiamVu Melya_b8412b60.jpg)</p>
<p>效果：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/Design%20by%20LiamVu%20Melya_b8412b60%20%E6%8B%B7%E8%B4%9D.jpg" alt="Design by LiamVu Melya_b8412b60 拷贝"></p>
<h2 id="图案叠加纹理"><a href="#图案叠加纹理" class="headerlink" title="图案叠加纹理"></a>图案叠加纹理</h2><p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E7%BB%B8%E7%BC%8E%E7%B4%A0%E6%9D%90.jpg" alt="绸缎素材"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E4%B8%AD%E5%9B%BD%E9%A3%8E%E5%9B%BE%E6%A1%88.jpg" alt="中国风图案"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%95%88%E6%9E%9C.jpg" alt="效果"></p>
<h2 id="赛事海报"><a href="#赛事海报" class="headerlink" title="赛事海报"></a>赛事海报</h2><p>素材</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/image-20240423223205804.png" alt="image-20240423223205804"></p>
<p>效果</p>
<p><img src="/" alt="未标题-1 拷贝"></p>
<h2 id="化妆品海报"><a href="#化妆品海报" class="headerlink" title="化妆品海报"></a>化妆品海报</h2><p>素材</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E8%83%8C%E6%99%AF%E7%B4%A0%E6%9D%902.jpeg"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E4%BA%A7%E5%93%81%E7%B4%A0%E6%9D%90.png"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%A2%B5%E8%8A%B1logo.png" alt="梵花logo"></p>
<p>效果</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%9C%AA%E6%A0%87%E9%A2%98-1%20%E6%8B%B7%E8%B4%9D.jpg"></p>
<p>素材：</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E7%91%95%E7%96%B5%E6%A8%A1%E7%89%B9%E5%8E%9F%E5%9B%BE.jpg"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E4%BA%A7%E5%93%81.png" alt="产品"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E7%AD%BE%E5%AD%97.jpeg" alt="签字"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E5%A4%A9%E7%8C%ABlogo.png" alt="天猫logo"></p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/4964089.jpg"></p>
<p>效果</p>
<p><img src="https://note-461f.obs.cn-south-1.myhuaweicloud.com/img/%E6%9C%AA%E6%A0%87%E9%A2%98-1%20%E6%8B%B7%E8%B4%9D-171388377684411.jpg" alt="未标题-1 拷贝"></p>
]]></content>
  </entry>
</search>
